{#
/**
 * @file
 * Template for the frontpage.
 *
 * Available variables:
 * - site_url: the base url of our page.
 */
#}
{% extends 'base.twig' %}

{% block content %}
  <h1 class="mt-3">ESN Simple Web Developing test</h1>

  <div class="tasks_container">
    <div class="tasks_group">
      <div class="task_header">Task 1 <span class="badge badge-easy">Easy</span></div>
      <div class="task">If you see this page, then you have succeeded the first task. You can proceed now with the next tasks but before continuing, please take a look to what is included in this page and to the following advices:</div>

      <div class="hints alert alert-primary" role="alert">
        The following libraries are already installed and ready-to-use. Information about them can be found in their respective websites:
        <ul>
          <li><a href="https://getbootstrap.com/" target="_blank" title="bootstrap page">Bootstrap</a> (version 4.5.0),</li>
          <li><a href="https://jquery.com" target="_blank" title="bootstrap page">jQuery</a> (version 3.5.1 slim),</li>
          <li><a href="https://twig.symfony.com/" target="_blank" title="twig page">Twig</a> (version 3.0.4) with debug enabled and dump() function available,</li>
          <li><a href="https://github.com/lipis/flag-icon-css" target="_blank" title="flag-icon-css github page">Flag-icon-css</a> (version 3.5.0),</li>
          <li><a href="https://fontawesome.com/" target="_blank" title="fontwawesome page">FontAwesome</a> (version 5.11.2),</li>
          <li><a href="https://github.com/PHPOffice/PhpSpreadsheet/" target="_blank" title="Php Spreadsheet github page">PhpOffice/phpspreadsheet</a> (version 1.14.1).</li>
        </ul>
      </div>
      <div class="hints alert alert-success" role="alert">Read the description of each task carefully, as might contain some clues or guidance for finishing the task.</div>
      <div class="hints alert alert-success" role="alert">Following coding standards (PHP or even Drupal ones) will be highly valued, as well readability and cleaninness of the code and number of lines used.</div>
      <div class="hints alert alert-success" role="alert">The result of each task will be displayed right after the task description and before the next one. Cache is disabled, so the output should appear automatically each time the page is refreshed.</div>
      <div class="hints alert alert-success" role="alert">In order to finish the task, the <strong>main</strong> goal is required. Finishing the optional subtasks are not mandatory but recommended.</div>
      <div class="hints alert alert-warning" role="alert">Each task tells you which file needs to be edited or created. Any other existing file must not be edited, but in some tasks it is mentioned to take a look to some files as might be interesting for finalizing the task successfully.</div>
    </div>

    <hr class="separation">

    <div class="tasks_group">
      <div class="task_header">Task 2 <span class="badge badge-easy">Easy</span></div>
      <div class="task">Inside the file <code>templates/blocks_front.twig</code>, the block <code>solution_news</code> is empty right now but you need to finish it in order to solve this task.</div>
      <div class="task">All the data needed for this task is already available in the twig file (as is mentioned in the twig file), you just need to render as will request now.</div>
      <div class="task"><strong>The main tasks are:</strong>
        <ul>
          <li>Using the bootstrap <strong>Card component</strong>, render a preview of the last three articles available form the list.</li>
          <li>The three articles need to appear horizontally, one next to the other, and with the proper separation in between each article.</li>
          <li>The preview must contain the title, the date, the first 250 chars of the article followed by '...' (or just the full article if the length is less), and a 'Go to the article' link (use '#' instead of a real URL).</li>
          <li>If extra css is needed, please use the in-line 'style' HTML property. We leave the design up to you.</li>
        </ul>
      </div>
      <div class="task"><em>The optional subtasks are:</em>
        <ul>
          <li>The preview can contain instead one of the images available in the article (if any) or show instead a placeholder from <a href="https://placeholder.com/" target="_blank">placeholder.com</a>.</li>
        </ul>
      </div>

      <div class="solution_container">
        <div class="solution_header">Solution to Task 2</div>
        {% block solution_news %}
          {% if num_articles == 0 %}
            <div><em>It seems there is an error and no articles have been fetched.</em></div>
          {% else %}
            <div><em>There are {{ num_articles }} articles fetched and you can proceed with the task.</em></div>
          {% endif %}
        {% endblock %}
      </div>
    </div>

    <hr class="separation">

    <div class="tasks_group">
      <div class="task_header">Task 3 <span class="badge badge-medium">Medium</span></div>
      <div class="task">Now we have already loaded the last 3 articles, you might have noticed there is no <code>/articles</code> page that list all the articles, neither a page to read each article. Could be interesting to have one.</div>
      <div class="task"><strong>The main tasks are:</strong>
        <ul>
          <li>Create a new class file inside the <code>src/Views</code> folder that extends the existing <code>AbstractView</code>.</li>
          <li>Inside that class, create one function that will render a page with all the articles fetched, and uses the route <code>articles</code>.</li>
          <li>Inside that class, create one function that will render a page with the specific article, and uses the route <code>article/{slug}</code>.</li>
        </ul>
      </div>
      <div class="task"><em>The optional subtasks are:</em>
        <ul>
          <li>If the article requested does not match an existing article, show instead a 404 page.</li>
          <li>Alter the preview in task 2 to point each article to the respective page.</li>
        </ul>
      </div>

      <div class="hints alert alert-primary" role="alert">
        <div><strong>Some hints:</strong></div>
        <div>The name you choose for the class does not matter, as the class will load automatically. Check the Front.php inside the <code>Views</code> folder to see how the functions are declared, as might be important. You don't need to create new controllers for this task, as all the needed ones are already created; you can use them. Parameters are passed automatically to the functions and available in the declaration of your function, matching what is written in the uri.</div>
      </div>

      <div class="hints alert alert-warning" role="alert">
        <div>
          Although this test disables the internal PHP caches, it might happen that the route you have set does not load automatically (and you get a 404). If that is the case, check in your <code>php.ini</code> if opcache is enabled and have some cache set (e.g: opcache.revalidate_freq).
        </div>
      </div>

      <div class="solution_container">
        <div class="solution_header">Solution to Task 3</div>
        <div>Link to the <a href="{{ site_url }}articles" target="_blank">Articles</a> page.</div>
      </div>
    </div>

    <hr class="separation">

    <div class="tasks_group">
      <div class="task_header">Task 4 <span class="badge badge-advanced">Advanced</span></div>
      <div class="task">The class file <code>src/TestController.php</code> needs to be finished, as well the respective block in the twig file.</div>
      <div class="task">As you can see, that class extends an existing class, but is almost empty except for a function that returns, for now, an empty array.</div>
      <div class="task">The extended class is in charge of fetching information belonging to ESN (countries, sections, etc.) from an API (but the returned data is a bit messy, and in several endpoints), and we want to show this information in a nice way by using again the <strong>Card component</strong> and extend the default collapse behavior to create an accordion.</div>
      <div class="task"><em>This accordion must contain one ESN country per group item (header) and inside the panel of this group item, all of the sections belonging to this country. In the header it must appear the flag and name of the country and the number of the sections belonging to it (leaving the style of this up to the user). The list of ESN sections that belongs to that country needs to be placed inside the panel. All the panes must be collapsible and must stay closed the moment the accordion is firstly rendered.</em></div>
      <div class="task"><strong>The main tasks are:</strong>
        <ul>
          <li>To complete the <code>getDataT4()</code> function, returning what is needed to build the required accordion.</li>
          <li>To finish the <code>solution_accordion</code> twig block in the file <code>templates/blocks_front.twig</code> using the returned value of the mentioned function to build the proposed accordion.</li>
          <li>There are multiple solutions to this approach, use the one that is easier for you.</li>
        </ul>
      </div>
      <div class="task"><em>The optional subtasks are:</em>
        <ul>
          <li>If the section have a website, show it by using the proper font-awesome icon and opening it in a new page just after the code.</li>
          <li>Sort the list by country name and/or by section name too.</li>
        </ul>
      </div>

      <div class="hints alert alert-primary" role="alert">
        <div><strong>Some hints:</strong></div>
        <ul>
          <li>You can create in your class as much as functions as wanted.</li>
          <li>The twig file loads automatically the variable, the documentation inside that file can be useful.</li>
          <li>The file <code>src/Controller/EsnFetcher.php</code> is quite important and contain all you need. Taking a look to them can be useful.</li>
        </ul>
      </div>
      <div class="task"><strong>The next image can be used as a reference for the output with one panel opened (it does not include the extra tasks).</strong></div>
      <div class="task" id="exampleAccordion" data-children=".item">
        <div class="item">
          <a data-toggle="collapse" data-parent="#exampleAccordion" href="#exampleAccordion1" aria-expanded="true" aria-controls="exampleAccordion1">
            Show Image
          </a>
          <div id="exampleAccordion1" class="collapse" role="tabpanel">
            <img src="./assets/img/task_1.png" alt="task1 example" class="img-fluid"/>
          </div>
        </div>
      </div>

      <div class="solution_container">
        <div class="solution_header">Solution to Task 4</div>
        {% block solution_accordion %}
          <div><em>The solution will appear here once the proper file is written.</em></div>
        {% endblock %}
      </div>
    </div>

    <hr class="separation">

    <div class="tasks_group">
      <div class="task_header">Task 5 <span class="badge badge-advanced">Advanced</span></div>
      <div class="task">Using the same class file from the task before, we want to get some extra information from a dataset existing in a XLSX file, that already exists in the root folder of this test.</div>
      <div class="task">If you open the document, you will see a set of codes, and we want to know the status of each code. If the card exists, will return some data. On the other hand, if the card does not exist, there will be no data in the response.</div>
      <div class="task">We would like to have a nice output of the result, by reading the XLSX file, getting the result of each card and then, displaying everything using a table (we leave the styling up to you).</div>
      <div class="task"><strong>The main tasks are:</strong>
        <ul>
          <li>To complete the <code>getDataT5()</code> function, returning what is needed to build the required table.</li>
          <li>To finish the <code>solution_table</code> twig block in the file <code>templates/blocks_front.twig</code> using the returned value of the mentioned function to build the proposed table.</li>
          <li>Each row of the table needs to have, if the card exists, the code of the card, the section code and the status. If the card does not exist, then we need to show the card with a message next to it in the table.</li>
          <li>There are multiple solutions to this approach, use the one that is easier for you.</li>
        </ul>
      </div>
      <div class="task"><em>The optional subtasks are:</em>
        <ul>
          <li>Sort the results by code.</li>
          <li>Include in the table the activation date and the expiration date as well, taking in consideration that each card is valid for a year counting from the moment it was activated.</li>
          <li>Replace the section code with the real name of the section, in those cards that have it.</li>
        </ul>
      </div>

      <div class="hints alert alert-primary" role="alert">
        <div><strong>Some hints:</strong></div>
        <ul>
          <li>Task 4 hints are also valid for this task.</li>
          <li>The function needed for validating cards is already available, as in Task 4.</li>
        </ul>
      </div>

      <div class="solution_container">
        <div class="solution_header">Solution to Task 5</div>
        {% block solution_table %}
          <div><em>The solution will appear here once the proper file is written.</em></div>
        {% endblock %}
      </div>
    </div>

    <hr class="separation">

    <div class="tasks_group">
      <div class="task_header">Task 6 <span class="badge badge-easy">Easy</span></div>
      <div class="task">Congratulations, there are no more tasks.</div>
      <div class="task">For those doing this test as part of the job application, please send me <code>TestController.php</code>, the <code>files created for Task 3</code> and the <code>blocks_front.twig</code> files by mail.</div>
    </div>
  </div>
{% endblock %}
